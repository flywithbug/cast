// Code generated by go-bindata.
// sources:
// template/api.h
// template/api.m
// template/model.h
// template/model.m
// DO NOT EDIT!

package cast

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateApiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x4e\xc3\x30\x0c\x86\xcf\xc9\x53\xf8\xd8\x54\xf0\x02\xe5\x32\xd0\x2a\xc4\xd4\x65\x88\xac\x87\x5d\x88\xb2\xd6\x83\xb0\x2c\x89\x92\x14\x34\x21\xde\x1d\x55\x6a\x37\x40\x45\xda\xd1\xf6\xe7\x7c\x7f\xe4\xcf\xdc\xab\xa0\xf2\x2f\x4a\xb9\x90\xb7\x42\xd4\xcb\x52\xf2\x15\xe7\x75\x55\xc9\xbb\xf2\xfe\x81\x53\x3a\xd3\x36\x61\xd8\xa9\x06\xe1\x44\x5f\x43\x66\x3b\x63\xd4\xd6\x20\x70\x51\x3f\x55\x02\x63\xd4\xce\xce\x55\x52\x6b\x15\xf7\x90\xb3\x83\xf2\x5a\x8e\x0b\xf2\x43\xa7\xd7\xa5\x6b\x3b\x83\xeb\xa3\xc7\x22\x5b\x6c\xce\x15\x4b\x47\x8f\x94\x90\x1e\x2d\xb2\x71\x05\x72\x90\x7c\x70\xb0\xbe\x75\xe8\x91\xe0\x5e\x02\xc6\x58\x9c\xf5\xef\x4e\xb7\x90\x3d\xb3\x8c\x8b\xc7\x61\x0a\xb9\xe4\xce\xf6\x04\x40\xe7\x8d\x53\xed\x38\x61\xec\x77\x4d\x09\x89\x5d\xd3\xfc\xfb\xe2\xd4\xcf\x4e\xa9\x20\xa9\xb8\xbf\x82\xa9\xc0\x10\x30\x7a\x67\x23\xae\xb6\x6f\xd8\x24\xc6\x06\x0b\x25\x64\xa7\xb4\xe9\x02\x5e\xee\x83\xbf\x42\x80\xc5\x86\x63\x2a\x43\x70\xe1\x67\x1c\xec\x1b\x8c\x0d\x82\x1b\x4a\x67\x68\xdb\xa9\xc3\x96\x7c\x4e\xbf\x03\x00\x00\xff\xff\x8f\x73\xb5\x7b\xf9\x01\x00\x00")

func templateApiHBytes() ([]byte, error) {
	return bindataRead(
		_templateApiH,
		"template/api.h",
	)
}

func templateApiH() (*asset, error) {
	bytes, err := templateApiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.h", size: 505, mode: os.FileMode(420), modTime: time.Unix(1561001162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApiM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6b\xe3\x30\x14\x3c\x5b\xbf\xe2\x91\x93\x65\x76\xf7\x07\x38\x2c\x64\xd9\xf6\x12\x5a\xb7\xd4\xe9\x21\x84\xd4\x28\xf6\x4b\xab\x46\x96\x84\x9e\x9c\x12\x42\xff\x7b\x91\x91\x9d\xa6\xa4\x50\x5f\xe4\xd1\xfb\x98\xf1\x8c\x8f\x99\x15\x4e\x64\xef\x8c\xcd\x64\x6b\x15\xb6\xa8\xbd\xf0\xd2\x68\x18\x2b\xbf\x21\xd5\x9d\x52\x62\xa3\x10\x8a\xf2\xf1\xe1\xa6\x44\x22\x69\xf4\x95\xf0\x62\x21\x68\x07\x19\x6f\x85\x95\xd5\x30\x50\xbd\x49\xff\x72\x6b\x9a\x4e\xe1\xe2\x60\x31\x4f\xe7\xcb\x13\xe2\xfe\x60\x91\x25\x49\x68\xcd\xd3\x61\x04\x32\xa8\x8a\xc8\xc1\xc3\x55\x1b\x5a\x9c\x79\x76\x48\x94\x9f\xe8\xf7\x46\x36\x90\x3e\xf1\xb4\x28\xef\x63\x15\xb2\xaa\x30\x3a\x74\x00\x74\x56\x19\xd1\x0c\x15\xce\xcf\x31\x4b\x12\xea\xea\xfa\xdb\x8d\x97\xbe\x6c\x54\x05\x5e\xd0\xee\x17\x5c\x12\x0c\x0e\xc9\x1a\x4d\x78\xb7\x79\xc5\xda\x73\x1e\x59\x58\x92\x6c\x85\x54\x9d\xc3\x9f\xf3\xc1\x57\x42\x80\xf9\xb2\x40\x7f\xed\x9c\x71\x9f\xe5\x60\xb8\xe0\x3c\x12\x1c\x59\x6f\x68\xfb\x47\xd4\x7d\x76\x7f\x61\x36\x19\xa4\x4e\xa6\x2c\x71\xe8\x3b\xa7\x61\x45\xa8\xb6\xd0\x87\x65\x0d\xf9\x3c\xe2\x3e\x9c\x7f\x56\x96\xe8\xf6\xe8\xf2\x90\xd0\x1a\xfa\x7d\xe8\xd1\x51\xde\xbf\x82\x43\xfb\x5f\x09\xa2\x7c\x35\x9a\x50\x07\xbc\x86\x31\xa8\x73\xbf\x61\x70\x3b\x9e\x30\xb8\x11\xcf\xf5\x94\x85\xdf\x0e\x75\xc3\xfa\xe7\x23\x00\x00\xff\xff\x16\x0c\x45\xb3\x8b\x02\x00\x00")

func templateApiMBytes() ([]byte, error) {
	return bindataRead(
		_templateApiM,
		"template/api.m",
	)
}

func templateApiM() (*asset, error) {
	bytes, err := templateApiMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.m", size: 651, mode: os.FileMode(420), modTime: time.Unix(1561001162, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\xcc\x2d\xc8\x2f\x2a\x51\xb0\xf1\x8a\x74\x4e\x2c\x2e\xf1\xce\x2c\xd1\x87\xb3\xf4\x32\xec\xb8\xb8\xaa\xb5\x0a\x12\x8b\x12\xb5\x6a\xb9\xb8\xfc\x82\xe3\x1d\x83\x83\x43\x7d\x5d\xe3\xfd\xfc\xfd\xfc\x42\x7d\x7c\xe2\x9d\x5c\xdd\x3d\xfd\xb8\xb8\x1c\x32\xf3\x4a\x52\x8b\xd2\x12\x93\x53\x15\x60\xaa\xad\xe0\xda\xe0\x0c\x87\xd4\xbc\x14\x6c\x86\xb8\xfa\xb9\x70\x71\x71\x71\x01\x02\x00\x00\xff\xff\xb0\x4c\x13\xa4\x89\x00\x00\x00")

func templateModelHBytes() ([]byte, error) {
	return bindataRead(
		_templateModelH,
		"template/model.h",
	)
}

func templateModelH() (*asset, error) {
	bytes, err := templateModelHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.h", size: 137, mode: os.FileMode(420), modTime: time.Unix(1561006625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x4d\x0a\xc2\x40\x0c\xc5\xf1\x75\x73\x8a\x50\x37\x5a\xa1\x3d\x80\x9b\x42\x05\x77\x22\x78\x82\xd8\x06\x3a\x30\x93\x0c\x69\x2a\x94\xd2\xbb\x8b\xf8\xb1\x7b\xbc\xdf\xe2\xbf\x0b\x29\xab\x39\x96\x6b\x95\xc9\xa8\xda\xea\xb1\x04\x68\x43\xca\x91\x13\x8b\x93\x07\x15\xfc\x21\xc0\x11\xf7\xd7\xfb\x39\xf4\xef\x9b\x6c\xc1\xea\x90\x74\xe0\xd8\xa9\x38\x05\x61\xbb\x99\x66\x36\x5f\x2e\x2c\x6c\xa1\xef\x22\x4d\x13\xae\x50\x34\x0d\x3e\x29\xce\x8c\xd3\xa8\x73\x1c\xf0\xc1\xf8\x31\xb5\xef\x10\x4a\x5c\x43\x61\xec\xb3\x09\xb6\xeb\xbf\x59\x6c\x27\xd8\x00\x5a\x96\xe1\x15\x00\x00\xff\xff\x51\x9f\x74\x49\xae\x00\x00\x00")

func templateModelMBytes() ([]byte, error) {
	return bindataRead(
		_templateModelM,
		"template/model.m",
	)
}

func templateModelM() (*asset, error) {
	bytes, err := templateModelMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.m", size: 174, mode: os.FileMode(420), modTime: time.Unix(1561009961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/api.h": templateApiH,
	"template/api.m": templateApiM,
	"template/model.h": templateModelH,
	"template/model.m": templateModelM,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"api.h": &bintree{templateApiH, map[string]*bintree{}},
		"api.m": &bintree{templateApiM, map[string]*bintree{}},
		"model.h": &bintree{templateModelH, map[string]*bintree{}},
		"model.m": &bintree{templateModelM, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

