// Code generated by go-bindata.
// sources:
// template/api.h
// template/api.m
// template/api_get.h
// template/api_get.m
// template/const
// template/java_api
// template/java_model
// template/java_package
// template/model.h
// template/model.m
// DO NOT EDIT!

package cast

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateApiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\xe2\x30\x10\x85\xcf\x99\x5f\x31\x62\x2f\xb1\xb5\x0b\x77\x76\xb5\xa2\x85\xa8\x6a\x0a\xa6\x6a\xe0\x90\x4b\x23\x93\x0c\xc5\x25\xc4\x96\xed\x14\xa1\xaa\xff\xbd\x8a\x94\x40\x5b\xa5\x52\x6f\x9e\xf7\x9e\xe7\x7b\x96\xfc\x4b\x1d\x8c\xb6\x1e\xff\xc5\xe9\x54\x3a\x7f\xa7\xfc\xe8\x7c\x1a\xee\xfe\x43\xe7\x0f\x5e\xb9\x91\x56\xf2\xb7\xe1\x6e\xd0\x2f\x82\x48\xb2\xab\x24\x59\x2f\xa2\x4c\x2c\x85\x58\xcf\xe7\xd9\x75\x74\x73\x2b\x00\x26\xaa\xf2\x64\xb7\x32\x27\x8c\xd3\x85\x34\x4a\x90\x3f\x6a\xbb\x9f\x96\x8a\x2a\x8f\x61\xb7\x85\x01\x8c\x38\x87\x6e\x04\xe4\x23\xf8\x83\x61\x55\x97\xa5\xdc\x94\x84\x22\x59\x3f\xcc\x13\x72\x4e\xe9\x6a\x26\xbd\x5c\x49\xb7\x47\xce\x0e\xd2\xa8\xac\xbb\x94\x1d\x95\xdf\x2d\x74\x51\x97\xb4\x3a\x19\x1a\x87\x71\x7a\x99\x98\x3f\x19\x82\x20\x68\xa2\xe3\x33\x16\x39\x66\xa2\x65\xb0\x46\x3a\x34\x11\xab\x9f\x2c\x39\x37\xbe\xe0\x5f\xb4\x2a\x30\x7c\x64\xa1\x48\xee\x5b\x17\x79\x26\x74\xd5\x24\x10\x6b\x53\x6a\x59\x74\x0e\x63\x9f\x67\x08\x02\x57\xe7\xf9\xb7\x1b\xfb\x5e\x76\x6e\x85\x5e\xba\xfd\x6f\xec\x2b\x8c\x96\x9c\xd1\x95\xa3\xe5\xe6\x99\x72\xcf\x58\x4b\x81\x20\xd8\x4a\x55\xd6\x96\x7e\xce\xc3\xaf\x40\xc4\x38\x15\xe4\x23\x6b\xb5\xfd\x58\x87\x1a\x81\xb1\x16\xf0\x17\x60\x42\x55\xd1\xf7\x01\x22\x31\x83\xf7\x00\x00\x00\xff\xff\xa9\x3b\xab\x5e\x62\x02\x00\x00")

func templateApiHBytes() ([]byte, error) {
	return bindataRead(
		_templateApiH,
		"template/api.h",
	)
}

func templateApiH() (*asset, error) {
	bytes, err := templateApiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.h", size: 610, mode: os.FileMode(420), modTime: time.Unix(1561353438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApiM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x5f\x6b\xfa\x30\x14\x7d\x6e\x3e\xc5\xa5\xbf\x97\xa6\xbf\xcd\x0f\x50\x19\x08\x6e\x2f\x32\xbb\x31\xdd\x83\x88\x2b\xb1\xbd\xce\xcc\x34\x09\xc9\xed\x44\xc4\xef\x3e\x5a\xda\x3a\x87\x83\xf5\x25\xbd\x7f\xcf\xb9\xe7\xfc\x93\xa5\x35\x8e\x20\x9c\x2c\xa6\xc2\xca\x14\x69\x6f\xdc\x6e\xac\x24\x6a\xfa\x7f\x8c\xad\x70\x22\x3e\x0d\xb6\x21\x63\x6c\x24\x4b\xab\xb0\x44\x4d\x82\xa4\xd1\x70\x65\x02\xa2\x6e\x84\x33\x76\x0b\x91\xae\x94\x12\x6b\x85\x90\xce\x5e\x5f\x1e\x67\xe8\xbd\x34\xfa\x5e\x90\x98\x0b\xbf\x83\x98\x97\xc2\xca\xac\x1b\xc9\xf6\x92\xb6\x53\x53\x54\x0a\xe7\x07\x8b\x49\x34\x59\x9c\x23\x4e\x07\x8b\x2c\x08\xea\xd6\xa4\x47\x81\x18\xb2\xb4\xc5\xe0\x75\xaa\xac\x5b\x9c\x79\x77\xe8\x7d\x72\x86\xff\x34\xb2\x80\xe8\x8d\x47\xe9\xec\xb9\xad\x42\x9c\xa5\x46\xd7\x1d\x00\x95\x55\x46\x14\x5d\x85\xf3\xcb\x98\x05\x81\xaf\xf2\xfc\xd7\x8d\xd7\x2e\xeb\x59\x01\x09\xbf\xbb\x81\x6b\x84\xc1\xa1\xb7\x46\x7b\x7c\x5a\x7f\x60\x4e\x9c\xb7\x28\x2c\x08\x36\x42\xaa\xca\xe1\xdf\xf1\xe0\x27\x20\xc0\x64\x91\x22\x3d\x38\x67\xdc\x77\x3a\x58\x27\x38\x6f\x01\x8e\xac\x11\xb4\x1c\x88\xbc\xb1\xf4\x0e\x46\x61\x47\x35\x1c\xb2\xc0\x21\x55\x4e\xc3\xd2\xa3\xda\x40\x63\x96\x35\x9e\xb2\xf2\x6c\x52\x6d\x0b\x34\x3b\x90\xd0\xf9\xa4\xf9\x05\x87\x76\xac\x84\xf7\xc9\xb2\x3f\x3c\xaf\xe3\x15\xf4\xe6\x5c\x6a\x0c\x9d\xc2\xed\x0b\x9d\x02\xed\xbb\x1a\xb2\x13\x63\x23\xd4\x05\x6b\xbe\xaf\x00\x00\x00\xff\xff\x26\xd4\x26\x4e\xb7\x02\x00\x00")

func templateApiMBytes() ([]byte, error) {
	return bindataRead(
		_templateApiM,
		"template/api.m",
	)
}

func templateApiM() (*asset, error) {
	bytes, err := templateApiMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.m", size: 695, mode: os.FileMode(420), modTime: time.Unix(1561450343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApi_getH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x8f\xda\x30\x10\x85\xcf\x99\x5f\x31\xa2\x97\xd8\x6a\xe1\x4e\xab\x8a\x16\xa2\xaa\x29\x98\xaa\x81\x43\x2e\x8d\x4c\x32\x2c\x5e\x82\x6d\xd9\xce\x22\xb4\xda\xff\xbe\x8a\x94\x00\x5a\x65\xa5\xbd\x79\xde\x7b\x9e\xef\x59\xf2\x27\x75\xb2\xc6\x05\xfc\x96\xe6\x73\xe9\xc3\x1f\x15\x26\xd7\xd3\xf8\xf0\x1d\x7a\x7f\xf4\xcc\xad\x74\x92\xbf\x8c\x0f\xa3\x61\x11\x44\x56\xfc\xc8\xb2\xed\x2a\x29\xc4\x5a\x88\xed\x72\x59\xfc\x4c\x7e\xfd\x16\x00\x33\xa5\x03\xb9\xbd\x2c\x09\xd3\x7c\x25\xad\x12\x14\xce\xc6\x1d\xe7\xb5\x22\x1d\x30\xee\xb7\x30\x80\x09\xe7\xd0\x8f\x80\x7c\x02\x5f\x30\xd6\x4d\x5d\xcb\x5d\x4d\x28\xb2\xed\xbf\x65\x46\xde\x2b\xa3\x17\x32\xc8\x8d\xf4\x47\xe4\xec\x24\xad\x2a\xfa\x4b\xc5\x59\x85\xc3\xca\x54\x4d\x4d\x9b\x8b\xa5\x69\x9c\xe6\xb7\x89\x85\x8b\x25\x88\xa2\x36\x3a\xbd\x62\x91\x63\x21\x3a\x06\x6b\xa5\x53\x1b\x71\xe6\xc1\x91\xf7\xd3\x1b\xfe\xc9\xa8\x0a\xe3\xff\x2c\x16\xd9\xdf\xce\x45\x5e\x08\xa3\xdb\x04\x62\x63\x6b\x23\xab\xde\x61\xac\x32\x67\x7d\xaf\x40\x14\xf9\xa6\x2c\xdf\xdd\x39\xf4\xb6\x6b\x2f\x0c\xd2\x1f\x3f\xe3\x50\x65\x74\xe4\xad\xd1\x9e\xd6\xbb\x47\x2a\x03\x63\x1d\x05\xa2\x68\x2f\x55\xdd\x38\xfa\x38\x0f\xdf\x02\x11\xd3\x5c\x50\x48\x9c\x33\xee\xbe\x0e\xb5\x02\x63\x1d\xe0\x2b\xc0\x8c\x74\x35\xf4\x05\x12\xb1\x80\xd7\x00\x00\x00\xff\xff\x6d\xaa\xe2\x50\x64\x02\x00\x00")

func templateApi_getHBytes() ([]byte, error) {
	return bindataRead(
		_templateApi_getH,
		"template/api_get.h",
	)
}

func templateApi_getH() (*asset, error) {
	bytes, err := templateApi_getHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api_get.h", size: 612, mode: os.FileMode(420), modTime: time.Unix(1561367184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApi_getM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6b\xea\x40\x14\x5d\x67\x7e\xc5\x25\x6f\x93\xc9\x7b\xcf\x1f\x10\x29\x08\xb6\x1b\xa9\x69\xa9\x76\x21\x62\xc3\x98\x5c\x75\xea\x64\x66\x98\xb9\xa9\x88\xf8\xdf\x4b\x42\x12\x45\x2c\x34\x9b\xc9\xfd\x3c\xe7\x9e\xf3\x47\x96\xd6\x38\x82\x70\xb2\x98\x0a\x2b\x53\xa4\x83\x71\xfb\xb1\x92\xa8\xe9\xef\x29\xb6\xc2\x89\xf8\x3c\xd8\x85\x8c\xb1\x91\x2c\xad\xc2\x12\x35\x09\x92\x46\xc3\x9d\x09\x88\xba\x11\xce\xd8\x7f\x88\x74\xa5\x94\x58\x2b\x84\x74\xf6\xfe\xf6\x3c\x43\xef\xa5\xd1\x8f\x82\xc4\x5c\xf8\x3d\xc4\xbc\x14\x56\x66\xdd\x48\x76\x90\xb4\x9b\x9a\xa2\x52\x38\x3f\x5a\x4c\xa2\xc9\xe2\x12\x71\x3a\x5a\x64\x41\x50\xb7\x26\x3d\x0a\xc4\x90\xa5\x2d\x06\xaf\x53\x65\xdd\xe2\xcc\xd6\xa1\xf7\xc9\x05\xfe\xcb\xc8\x02\xa2\x0f\x1e\xa5\xb3\xd7\xb6\x0a\x71\x96\x1a\x5d\x77\x00\x54\x56\x19\x51\x74\x15\xce\x0b\x73\xd0\xd7\x19\x16\x04\xbe\xca\xf3\x1f\x77\xde\xbb\xad\xe7\x05\x24\xfc\xfe\x1f\xdc\xa3\x0c\x0e\xbd\x35\xda\xe3\xcb\xfa\x13\x73\xe2\xbc\x45\x61\x41\xb0\x11\x52\x55\x0e\x7f\x8f\x07\xb7\x80\x00\x93\x45\x8a\xf4\xe4\x9c\x71\xd7\x74\xb0\x4e\x70\xde\x02\x9c\x58\x23\x69\x39\x10\x79\x63\xea\x03\x8c\xc2\x8e\x6a\x38\x64\x81\x43\xaa\x9c\x86\xa5\x47\xb5\x81\xc6\xae\x2d\x52\x56\x5e\x5c\xaa\x7d\x81\x66\x05\x12\x3a\x9f\x34\xbf\xe0\xd0\x8e\x95\xf0\x3e\x59\xf6\x77\xe7\x75\xbc\x82\xde\x9d\x5b\x91\xa1\x93\xb8\x7d\xa1\x93\xa0\x7d\x57\x43\x76\x66\x6c\x84\xba\x60\xcd\xf7\x1d\x00\x00\xff\xff\x2e\x37\xf9\xbc\xba\x02\x00\x00")

func templateApi_getMBytes() ([]byte, error) {
	return bindataRead(
		_templateApi_getM,
		"template/api_get.m",
	)
}

func templateApi_getM() (*asset, error) {
	bytes, err := templateApi_getMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api_get.m", size: 698, mode: os.FileMode(420), modTime: time.Unix(1561450343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateConst = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x8a\x0c\x4a\x2d\x2e\xc8\xcf\x2b\x4e\xf5\xcd\x4f\x49\xcd\xd1\xf1\x8a\x0c\x2c\x4d\x2d\xaa\x0c\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\xd2\xf1\x8a\xf4\x4d\x2c\xc8\xf4\x4b\x2d\x29\xcf\x2f\xca\x76\xce\xc9\x4c\xcd\x2b\x01\x04\x00\x00\xff\xff\x94\xcb\x8f\x64\x34\x00\x00\x00")

func templateConstBytes() ([]byte, error) {
	return bindataRead(
		_templateConst,
		"template/const",
	)
}

func templateConst() (*asset, error) {
	bytes, err := templateConstBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/const", size: 52, mode: os.FileMode(420), modTime: time.Unix(1561012612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJava_api = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4d\x6e\xc4\x20\x0c\x85\xf7\x9c\xc2\x9a\x15\x61\xd1\x39\x40\x7f\xc4\x28\xad\xd4\x5d\x17\x3d\x81\x0b\x56\x27\x12\x62\x52\x1b\xaa\x2a\x51\xee\x5e\x11\x05\x92\x61\x05\xcf\xf8\x7b\xef\xcd\x66\x44\x46\xb3\x28\x75\x36\x46\xb5\x17\x98\xb3\xb2\xaf\x98\x50\xd9\x8b\x73\x24\x72\x63\xd1\xee\x8a\x43\x84\x67\x48\x9c\xa9\x53\xf6\xed\x27\x63\x90\x4b\xf4\xef\x28\xd7\xfe\xe6\x49\x3b\x0c\xe1\x33\x8f\xc4\xed\xd3\x98\xbf\xc2\xe0\xc0\x05\x14\x81\x4a\x07\xfa\x4b\x14\xfd\x2e\x3c\xd5\xcb\x0b\xcc\x7b\x06\x05\x00\xb0\x01\xaa\xa8\x3b\x98\x57\xbd\x1c\x29\x56\xfa\x54\x67\xa7\xee\x71\x1d\x6d\x9b\xf6\xe3\x97\x98\x07\x4f\x47\x4e\x5f\x82\x1c\xec\xbe\x29\x95\x96\x7d\xc0\x69\xba\x63\x33\xa5\xcc\xb1\xf9\x3e\xac\x0d\x1a\x7f\xf9\x0f\x00\x00\xff\xff\xd9\x6c\x40\x7d\x37\x01\x00\x00")

func templateJava_apiBytes() ([]byte, error) {
	return bindataRead(
		_templateJava_api,
		"template/java_api",
	)
}

func templateJava_api() (*asset, error) {
	bytes, err := templateJava_apiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/java_api", size: 311, mode: os.FileMode(420), modTime: time.Unix(1561442562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJava_model = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xce\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\x62\x96\xb5\x77\x10\xa6\xa8\xa0\xae\x04\xf1\x00\x31\x0d\x76\x30\x24\x63\x32\x83\x8b\xd2\xbb\x0b\x82\x76\xfb\x78\xfc\x7c\x73\x5f\xc0\xa0\x5f\x42\x48\x7b\xa8\x10\xd2\x80\x48\xee\x6a\xde\xe1\x04\x59\xe2\x36\x56\x6b\xb4\x09\xe9\xf0\x6a\xc0\x3e\xc8\x78\x04\x9f\x76\x3a\x52\x87\xc0\x7c\x6d\x85\x6c\x3d\x9d\x5d\xe5\xf4\x10\x35\xba\x98\x16\xb2\x9a\xc9\xbb\xfc\x1d\x6e\xf2\x14\x7d\xaf\xc1\xd2\xee\x9c\x31\x22\x83\x7b\xfc\x31\xe2\x1c\xfe\xa2\xe5\x13\x00\x00\xff\xff\x6f\x94\x0d\x2b\x9c\x00\x00\x00")

func templateJava_modelBytes() ([]byte, error) {
	return bindataRead(
		_templateJava_model,
		"template/java_model",
	)
}

func templateJava_model() (*asset, error) {
	bytes, err := templateJava_modelBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/java_model", size: 156, mode: os.FileMode(420), modTime: time.Unix(1561376074, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateJava_package = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\xd5\x4b\x4d\xca\xcc\x4e\xd5\x4b\x4f\xcd\x4b\xce\x4f\x01\xd3\x3a\xae\x4e\x99\xd9\xa9\x8e\x05\x99\x41\xa9\x85\xa5\xa9\xc5\x25\x10\xbe\x6f\x69\x71\x89\x4f\x7e\x7a\x66\x1e\x42\x82\x0b\x10\x00\x00\xff\xff\x7c\x29\x26\xb1\x3f\x00\x00\x00")

func templateJava_packageBytes() ([]byte, error) {
	return bindataRead(
		_templateJava_package,
		"template/java_package",
	)
}

func templateJava_package() (*asset, error) {
	bytes, err := templateJava_packageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/java_package", size: 63, mode: os.FileMode(420), modTime: time.Unix(1561442476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\xcc\x2d\xc8\x2f\x2a\x51\xb0\xf1\x8a\x74\x4e\x2c\x2e\xf1\xce\x2c\xd1\x87\xb3\xf4\x32\xec\xb8\xb8\xaa\xb5\x0a\x12\x8b\x12\xb5\x6a\xb9\xb8\xfc\x82\xe3\x1d\x83\x83\x43\x7d\x5d\xe3\xfd\xfc\xfd\xfc\x42\x7d\x7c\xe2\x9d\x5c\xdd\x3d\xfd\xb8\xb8\x1c\x32\xf3\x4a\x52\x8b\xd2\x12\x93\x53\x15\x60\xaa\xad\xe0\xda\xe0\x0c\x87\xd4\xbc\x14\x6c\x86\xb8\xfa\xb9\x70\x71\x71\x71\x01\x02\x00\x00\xff\xff\xb0\x4c\x13\xa4\x89\x00\x00\x00")

func templateModelHBytes() ([]byte, error) {
	return bindataRead(
		_templateModelH,
		"template/model.h",
	)
}

func templateModelH() (*asset, error) {
	bytes, err := templateModelHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.h", size: 137, mode: os.FileMode(420), modTime: time.Unix(1561006625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x4d\x0a\xc2\x40\x0c\xc5\xf1\x75\x73\x8a\x50\x37\x5a\xa1\x3d\x80\x9b\x42\x05\x77\x22\x78\x82\xd8\x06\x3a\x30\x93\x0c\x69\x2a\x94\xd2\xbb\x8b\xf8\xb1\x7b\xbc\xdf\xe2\xbf\x0b\x29\xab\x39\x96\x6b\x95\xc9\xa8\xda\xea\xb1\x04\x68\x43\xca\x91\x13\x8b\x93\x07\x15\xfc\x21\xc0\x11\xf7\xd7\xfb\x39\xf4\xef\x9b\x6c\xc1\xea\x90\x74\xe0\xd8\xa9\x38\x05\x61\xbb\x99\x66\x36\x5f\x2e\x2c\x6c\xa1\xef\x22\x4d\x13\xae\x50\x34\x0d\x3e\x29\xce\x8c\xd3\xa8\x73\x1c\xf0\xc1\xf8\x31\xb5\xef\x10\x4a\x5c\x43\x61\xec\xb3\x09\xb6\xeb\xbf\x59\x6c\x27\xd8\x00\x5a\x96\xe1\x15\x00\x00\xff\xff\x51\x9f\x74\x49\xae\x00\x00\x00")

func templateModelMBytes() ([]byte, error) {
	return bindataRead(
		_templateModelM,
		"template/model.m",
	)
}

func templateModelM() (*asset, error) {
	bytes, err := templateModelMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.m", size: 174, mode: os.FileMode(420), modTime: time.Unix(1561009961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/api.h": templateApiH,
	"template/api.m": templateApiM,
	"template/api_get.h": templateApi_getH,
	"template/api_get.m": templateApi_getM,
	"template/const": templateConst,
	"template/java_api": templateJava_api,
	"template/java_model": templateJava_model,
	"template/java_package": templateJava_package,
	"template/model.h": templateModelH,
	"template/model.m": templateModelM,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"api.h": &bintree{templateApiH, map[string]*bintree{}},
		"api.m": &bintree{templateApiM, map[string]*bintree{}},
		"api_get.h": &bintree{templateApi_getH, map[string]*bintree{}},
		"api_get.m": &bintree{templateApi_getM, map[string]*bintree{}},
		"const": &bintree{templateConst, map[string]*bintree{}},
		"java_api": &bintree{templateJava_api, map[string]*bintree{}},
		"java_model": &bintree{templateJava_model, map[string]*bintree{}},
		"java_package": &bintree{templateJava_package, map[string]*bintree{}},
		"model.h": &bintree{templateModelH, map[string]*bintree{}},
		"model.m": &bintree{templateModelM, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

