// Code generated by go-bindata.
// sources:
// template/api.h
// template/api.m
// template/const
// template/model.h
// template/model.m
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateApiH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x4f\xe3\x30\x10\x85\xcf\xf1\xaf\x18\x75\x2f\x71\xb4\xdb\xbd\x17\x84\x0a\x6d\x84\x08\xad\x8b\x48\x7b\xc8\x05\xcb\x4d\xa6\xd4\xd4\xb5\x2d\xdb\xa1\xaa\x10\xff\x1d\x45\x4a\x5a\x40\x41\xe2\xe6\x79\xef\x79\xbe\x67\xf9\x8f\xdc\x5b\xe3\x02\x5c\x66\xc5\x44\xf8\x70\x2f\xc3\xff\xd3\x69\xb8\xbd\x22\x9d\x3f\x78\x4b\xac\x70\x22\x79\x1f\x6e\x07\xfd\x22\x61\x39\xbf\xce\xf3\xd5\x3c\xe5\x6c\xc1\xd8\x6a\x36\xe3\x37\xe9\xed\x1d\x23\x64\x2c\x75\x40\xb7\x11\x25\x42\x56\xcc\x85\x95\x0c\xc3\xc1\xb8\xdd\x44\x49\xd4\x01\xe2\x6e\x0b\x25\xff\x20\xd6\xb5\x52\x62\xad\x10\x58\xbe\x7a\x9c\xe5\xe8\xbd\x34\x7a\x2a\x82\x58\x0a\xbf\x83\x84\xee\x85\x95\xbc\xbb\xc1\x0f\x32\x6c\xe7\xa6\xaa\x15\x2e\x8f\x16\x47\x71\x56\x9c\x27\x1a\x8e\x16\x49\x14\x35\xd1\xd1\x09\x02\x09\x70\xd6\x32\x68\x23\xed\x9b\x88\x33\xcf\x0e\xbd\x1f\x9d\xf1\xaf\x46\x56\x10\x3f\xd1\x98\xe5\x0f\xad\x0b\x09\x67\x46\x37\x09\x80\xda\x2a\x23\xaa\xce\xa1\xf4\xeb\x4c\xa2\xc8\xd7\x65\xf9\xe3\xc6\xbe\x97\x9d\x5a\x41\x10\x7e\xf7\x17\xfa\x0a\x83\x43\x6f\x8d\xf6\xb8\x58\xbf\x60\x19\x28\x6d\x29\x24\x8a\x36\x42\xaa\xda\xe1\xef\x79\xf0\x1d\x08\x90\x15\x0c\x43\xea\x9c\x71\x9f\xeb\x60\x23\x50\xda\x02\x2e\x08\x19\xa3\xae\xfa\xbe\x3b\x65\x53\xf2\x11\x00\x00\xff\xff\x93\xe2\xed\x0d\x50\x02\x00\x00")

func templateApiHBytes() ([]byte, error) {
	return bindataRead(
		_templateApiH,
		"template/api.h",
	)
}

func templateApiH() (*asset, error) {
	bytes, err := templateApiHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.h", size: 592, mode: os.FileMode(420), modTime: time.Unix(1561011979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApiM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\xe2\x30\x14\x3c\xc7\xbf\xe2\x29\x7b\x89\xb3\xbb\xfc\x80\xa0\x95\x58\xd1\x5e\x50\x49\xab\x86\x1e\x10\xa2\x91\x49\x1e\xc5\xc5\xb1\xad\x67\x07\x84\x10\xff\xbd\x4a\x94\x40\xa9\xa8\xd4\x5c\x9c\xf1\xfb\x98\xf1\xcc\x2f\x59\x59\x43\x1e\xc2\xc9\x7c\x2a\xac\x4c\xd1\xef\x0d\x6d\xc7\x4a\xa2\xf6\xbf\x8f\xb1\x15\x24\xe2\xd3\x60\x13\x32\x36\x92\x95\x55\x58\xa1\xf6\xc2\x4b\xa3\xa1\x2f\xb2\xbf\x10\xe9\x5a\x29\xb1\x52\x08\x69\xf6\xf2\xfc\x90\xa1\x73\xd2\xe8\x3b\xe1\xc5\x4c\xb8\x2d\xc4\xbc\x12\x56\xe6\xfd\x40\xbe\x97\x7e\x33\x35\x65\xad\x70\x76\xb0\x98\x44\x93\xf9\x05\x71\x7f\xb0\xc8\x82\xa0\x69\x4d\xa2\x7e\x04\x62\xc8\xd3\x8e\x83\x37\x57\x55\xd3\x42\xe6\x8d\xd0\xb9\xe4\x42\xbf\x33\xb2\x84\xe8\x95\x47\x69\xf6\xd4\x55\x21\xce\x53\xa3\x9b\x0e\x80\xda\x2a\x23\xca\xbe\xc2\xf9\x35\x66\x41\xe0\xea\xa2\xf8\x76\xe3\xad\x97\x9d\x55\x81\x17\x6e\xfb\x07\x6e\x09\x06\x42\x67\x8d\x76\xf8\xb8\x7a\xc7\xc2\x73\xde\xb1\xb0\x20\x58\x0b\xa9\x6a\xc2\x9f\xf3\xc1\x57\x42\x80\xc9\x3c\x45\x7f\x4f\x64\xe8\xb3\x1c\x6c\x2e\x38\xef\x08\x8e\xac\x35\xb4\x1a\x88\xa2\xcd\xee\x1f\x8c\xc2\x5e\x6a\x38\x64\x01\xa1\xaf\x49\xc3\xc2\xa1\x5a\x43\x1b\x96\x35\xce\x27\x1d\x6e\xc3\xf9\x6f\x65\x86\xb4\x43\x4a\x9a\x84\x96\xd0\xee\x43\x8f\xe4\x92\xf6\x17\x08\xed\x58\x09\xe7\x92\xc5\xd9\x84\xa2\xc1\x4b\x38\x07\x75\xed\x37\xf4\x6e\x77\x27\xf4\x6e\x74\xe7\x72\xc8\x4e\x8c\x8d\x50\x97\xac\xfd\x3e\x02\x00\x00\xff\xff\xc8\xf3\x5c\x47\xab\x02\x00\x00")

func templateApiMBytes() ([]byte, error) {
	return bindataRead(
		_templateApiM,
		"template/api.m",
	)
}

func templateApiM() (*asset, error) {
	bytes, err := templateApiMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/api.m", size: 683, mode: os.FileMode(420), modTime: time.Unix(1561012065, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateConst = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x8a\x0c\x4a\x2d\x2e\xc8\xcf\x2b\x4e\xf5\xcd\x4f\x49\xcd\xd1\xf1\x8a\x0c\x2c\x4d\x2d\xaa\x0c\x48\x2c\x4a\xcc\x4d\x2d\x49\x2d\xd2\xf1\x8a\xf4\x4d\x2c\xc8\xf4\x4b\x2d\x29\xcf\x2f\xca\x76\xce\xc9\x4c\xcd\x2b\x01\x04\x00\x00\xff\xff\x94\xcb\x8f\x64\x34\x00\x00\x00")

func templateConstBytes() ([]byte, error) {
	return bindataRead(
		_templateConst,
		"template/const",
	)
}

func templateConst() (*asset, error) {
	bytes, err := templateConstBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/const", size: 52, mode: os.FileMode(420), modTime: time.Unix(1561012612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelH = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\xcc\x2d\xc8\x2f\x2a\x51\xb0\xf1\x8a\x74\x4e\x2c\x2e\xf1\xce\x2c\xd1\x87\xb3\xf4\x32\xec\xb8\xb8\xaa\xb5\x0a\x12\x8b\x12\xb5\x6a\xb9\xb8\xfc\x82\xe3\x1d\x83\x83\x43\x7d\x5d\xe3\xfd\xfc\xfd\xfc\x42\x7d\x7c\xe2\x9d\x5c\xdd\x3d\xfd\xb8\xb8\x1c\x32\xf3\x4a\x52\x8b\xd2\x12\x93\x53\x15\x60\xaa\xad\xe0\xda\xe0\x0c\x87\xd4\xbc\x14\x6c\x86\xb8\xfa\xb9\x70\x71\x71\x71\x01\x02\x00\x00\xff\xff\xb0\x4c\x13\xa4\x89\x00\x00\x00")

func templateModelHBytes() ([]byte, error) {
	return bindataRead(
		_templateModelH,
		"template/model.h",
	)
}

func templateModelH() (*asset, error) {
	bytes, err := templateModelHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.h", size: 137, mode: os.FileMode(420), modTime: time.Unix(1561006625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelM = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\x4d\x0a\xc2\x40\x0c\xc5\xf1\x75\x73\x8a\x50\x37\x5a\xa1\x3d\x80\x9b\x42\x05\x77\x22\x78\x82\xd8\x06\x3a\x30\x93\x0c\x69\x2a\x94\xd2\xbb\x8b\xf8\xb1\x7b\xbc\xdf\xe2\xbf\x0b\x29\xab\x39\x96\x6b\x95\xc9\xa8\xda\xea\xb1\x04\x68\x43\xca\x91\x13\x8b\x93\x07\x15\xfc\x21\xc0\x11\xf7\xd7\xfb\x39\xf4\xef\x9b\x6c\xc1\xea\x90\x74\xe0\xd8\xa9\x38\x05\x61\xbb\x99\x66\x36\x5f\x2e\x2c\x6c\xa1\xef\x22\x4d\x13\xae\x50\x34\x0d\x3e\x29\xce\x8c\xd3\xa8\x73\x1c\xf0\xc1\xf8\x31\xb5\xef\x10\x4a\x5c\x43\x61\xec\xb3\x09\xb6\xeb\xbf\x59\x6c\x27\xd8\x00\x5a\x96\xe1\x15\x00\x00\xff\xff\x51\x9f\x74\x49\xae\x00\x00\x00")

func templateModelMBytes() ([]byte, error) {
	return bindataRead(
		_templateModelM,
		"template/model.m",
	)
}

func templateModelM() (*asset, error) {
	bytes, err := templateModelMBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.m", size: 174, mode: os.FileMode(420), modTime: time.Unix(1561009961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/api.h": templateApiH,
	"template/api.m": templateApiM,
	"template/const": templateConst,
	"template/model.h": templateModelH,
	"template/model.m": templateModelM,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"api.h": &bintree{templateApiH, map[string]*bintree{}},
		"api.m": &bintree{templateApiM, map[string]*bintree{}},
		"const": &bintree{templateConst, map[string]*bintree{}},
		"model.h": &bintree{templateModelH, map[string]*bintree{}},
		"model.m": &bintree{templateModelM, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

